// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a = instruction, b =aluOutput , sel = instruction[15], out = instructionMux);

    Not(in = instruction[15], out = isAInstruction);

    Or (a = isAInstruction, b = instruction[5], out = saveToA);

    // addressM[15]
    ARegister(in = instructionMux, load = saveToA, out= ARegOut, out[0..14] = addressM );

    Mux16( a = ARegOut, b =inM, sel = instruction[12], out = fetchedAluY );

    // OUT : writeM
    And(a=instruction[15], b=instruction[3], out=writeM );

    And(a =  instruction[15], b = instruction[4], out = saveToD);
    DRegister(in = aluOutput, load = saveToD , out = DRegOut);

    // OUT : outM[16]
    ALU ( x  = DRegOut,
          y  = fetchedAluY,
         zx  = instruction[11],
         nx  = instruction[10],
         zy  = instruction[9],
         ny  = instruction[8],
         f   = instruction[7],
         no  = instruction[6],

         out = aluOutput,
         out = outM,
         zr  = isZero,
         ng  = isNeg);

         And(a = instruction[2], b = isNeg, out = isLessZero);
         And(a = instruction[1], b = isZero, out = isEqZero);

         Not( in = isNeg, out = isGrOrEqZero);
         Not( in = isZero, out = isNotEqZero);
         And (a = isGrOrEqZero, b =  isNotEqZero, out = isGrZero);
         And(a = instruction[0], b = isGrZero, out = isGrZeroJ);

         Or8Way(    in[0] = isLessZero,
         in[1] = isEqZero,
         in[2] = isGrZeroJ,
         in[3] = false,
         in[4] = false,
         in[5] = false,
         in[6] = false,
         in[7] = false,
         out = isJmp);

         And(a = isJmp, b = instruction[15], out = performJmp);

         Not(in = performJmp, out = isInc);
//OUT : pc
    PC(in = ARegOut, load = performJmp, inc = isInc, reset = reset, out[0..14] = pc );


}
